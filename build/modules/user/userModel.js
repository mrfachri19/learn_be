const connection = require("../../config/mysql");
module.exports = {
  register: data => new Promise((resolve, reject) => {
    connection.query("INSERT INTO user SET ?", data, (error, result) => {
      if (!error) {
        const newResult = {
          id: result.insertId,
          ...data
        };
        delete newResult.password;
        resolve(newResult);
      } else {
        reject(new Error(`SQL : ${error.sqlMessage}`));
      }
    });
  }),
  getUserByEmail: email => new Promise((resolve, reject) => {
    connection.query("SELECT * FROM user WHERE email = ?", email, (error, result) => {
      if (!error) {
        resolve(result);
      } else {
        reject(new Error(`SQL: ${error.sqlMessage}`));
      }
    });
  }),
  getUserId: id => new Promise((resolve, reject) => {
    connection.query("SELECT * FROM user WHERE id = ?", id, (err, result) => {
      if (!err) {
        resolve(result);
      } else {
        reject(new Error(`SQL : ${err.sqlMessage}`));
      }
    });
  }),
  getAllUser: (limit, offset, search, sort) => new Promise((resolve, reject) => {
    connection.query(`SELECT * FROM user WHERE namaDepan LIKE '%${search}%' ORDER BY ${sort} LIMIT ? OFFSET ?`, [limit, offset], (err, result) => {
      if (!err) {
        resolve(result);
      } else {
        reject(new Error(`SQL : ${err.sqlMessage}`));
      }
    });
  }),
  getCountUser: search => new Promise((resolve, reject) => {
    connection.query(`SELECT COUNT(*) AS total FROM user WHERE namaDepan LIKE '%${search}%'`, (err, result) => {
      if (!err) {
        resolve(result[0].total);
      } else {
        reject(new Error(`SQL : ${err.sqlMessage}`));
      }
    });
  }),
  updateUser: (data, id) => new Promise((resolve, reject) => {
    connection.query("UPDATE user SET ? WHERE id = ?", [data, id], error => {
      if (!error) {
        const newResult = {
          id,
          ...data
        };
        resolve(newResult);
      } else {
        reject(new Error(`SQL : ${error.sqlMessage}`));
      }
    });
  })
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb25uZWN0aW9uIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZWdpc3RlciIsImRhdGEiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInF1ZXJ5IiwiZXJyb3IiLCJyZXN1bHQiLCJuZXdSZXN1bHQiLCJpZCIsImluc2VydElkIiwicGFzc3dvcmQiLCJFcnJvciIsInNxbE1lc3NhZ2UiLCJnZXRVc2VyQnlFbWFpbCIsImVtYWlsIiwiZ2V0VXNlcklkIiwiZXJyIiwiZ2V0QWxsVXNlciIsImxpbWl0Iiwib2Zmc2V0Iiwic2VhcmNoIiwic29ydCIsImdldENvdW50VXNlciIsInRvdGFsIiwidXBkYXRlVXNlciJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2R1bGVzL3VzZXIvdXNlck1vZGVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNvbm5lY3Rpb24gPSByZXF1aXJlKFwiLi4vLi4vY29uZmlnL215c3FsXCIpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgcmVnaXN0ZXI6IChkYXRhKSA9PlxyXG4gICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBjb25uZWN0aW9uLnF1ZXJ5KFwiSU5TRVJUIElOVE8gdXNlciBTRVQgP1wiLCBkYXRhLCAoZXJyb3IsIHJlc3VsdCkgPT4ge1xyXG4gICAgICAgIGlmICghZXJyb3IpIHtcclxuICAgICAgICAgIGNvbnN0IG5ld1Jlc3VsdCA9IHtcclxuICAgICAgICAgICAgaWQ6IHJlc3VsdC5pbnNlcnRJZCxcclxuICAgICAgICAgICAgLi4uZGF0YSxcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICBkZWxldGUgbmV3UmVzdWx0LnBhc3N3b3JkO1xyXG4gICAgICAgICAgcmVzb2x2ZShuZXdSZXN1bHQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBTUUwgOiAke2Vycm9yLnNxbE1lc3NhZ2V9YCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KSxcclxuICBnZXRVc2VyQnlFbWFpbDogKGVtYWlsKSA9PlxyXG4gICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBjb25uZWN0aW9uLnF1ZXJ5KFxyXG4gICAgICAgIFwiU0VMRUNUICogRlJPTSB1c2VyIFdIRVJFIGVtYWlsID0gP1wiLFxyXG4gICAgICAgIGVtYWlsLFxyXG4gICAgICAgIChlcnJvciwgcmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICBpZiAoIWVycm9yKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFNRTDogJHtlcnJvci5zcWxNZXNzYWdlfWApKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICB9KSxcclxuICAgIGdldFVzZXJJZDogKGlkKSA9PlxyXG4gICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBjb25uZWN0aW9uLnF1ZXJ5KFxyXG4gICAgICAgIFwiU0VMRUNUICogRlJPTSB1c2VyIFdIRVJFIGlkID0gP1wiLFxyXG4gICAgICAgIGlkLFxyXG4gICAgICAgIChlcnIsIHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgaWYgKCFlcnIpIHtcclxuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgU1FMIDogJHtlcnIuc3FsTWVzc2FnZX1gKSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG4gICAgfSksXHJcbiAgICBnZXRBbGxVc2VyOiAobGltaXQsIG9mZnNldCwgc2VhcmNoLCBzb3J0KSA9PlxyXG4gICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBjb25uZWN0aW9uLnF1ZXJ5KFxyXG4gICAgICAgIGBTRUxFQ1QgKiBGUk9NIHVzZXIgV0hFUkUgbmFtYURlcGFuIExJS0UgJyUke3NlYXJjaH0lJyBPUkRFUiBCWSAke3NvcnR9IExJTUlUID8gT0ZGU0VUID9gLFxyXG4gICAgICAgIFtsaW1pdCwgb2Zmc2V0XSxcclxuICAgICAgICAoZXJyLCByZXN1bHQpID0+IHtcclxuICAgICAgICAgIGlmICghZXJyKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFNRTCA6ICR7ZXJyLnNxbE1lc3NhZ2V9YCkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICAgIH0pLFxyXG4gICAgZ2V0Q291bnRVc2VyOiAoc2VhcmNoKSA9PlxyXG4gICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBjb25uZWN0aW9uLnF1ZXJ5KFxyXG4gICAgICAgIGBTRUxFQ1QgQ09VTlQoKikgQVMgdG90YWwgRlJPTSB1c2VyIFdIRVJFIG5hbWFEZXBhbiBMSUtFICclJHtzZWFyY2h9JSdgLFxyXG4gICAgICAgIChlcnIsIHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgaWYgKCFlcnIpIHtcclxuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHRbMF0udG90YWwpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgU1FMIDogJHtlcnIuc3FsTWVzc2FnZX1gKSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG4gICAgfSksXHJcbiAgICB1cGRhdGVVc2VyOiAoZGF0YSwgaWQpID0+XHJcbiAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGNvbm5lY3Rpb24ucXVlcnkoXHJcbiAgICAgICAgXCJVUERBVEUgdXNlciBTRVQgPyBXSEVSRSBpZCA9ID9cIixcclxuICAgICAgICBbZGF0YSwgaWRdLFxyXG4gICAgICAgIChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgaWYgKCFlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdSZXN1bHQgPSB7XHJcbiAgICAgICAgICAgICAgaWQsXHJcbiAgICAgICAgICAgICAgLi4uZGF0YSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmVzb2x2ZShuZXdSZXN1bHQpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgU1FMIDogJHtlcnJvci5zcWxNZXNzYWdlfWApKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICB9KSxcclxufTsiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFVBQVUsR0FBR0MsT0FBTyxDQUFDLG9CQUFvQixDQUFDO0FBRWhEQyxNQUFNLENBQUNDLE9BQU8sR0FBRztFQUNmQyxRQUFRLEVBQUdDLElBQUksSUFDYixJQUFJQyxPQUFPLENBQUMsQ0FBQ0MsT0FBTyxFQUFFQyxNQUFNLEtBQUs7SUFDL0JSLFVBQVUsQ0FBQ1MsS0FBSyxDQUFDLHdCQUF3QixFQUFFSixJQUFJLEVBQUUsQ0FBQ0ssS0FBSyxFQUFFQyxNQUFNLEtBQUs7TUFDbEUsSUFBSSxDQUFDRCxLQUFLLEVBQUU7UUFDVixNQUFNRSxTQUFTLEdBQUc7VUFDaEJDLEVBQUUsRUFBRUYsTUFBTSxDQUFDRyxRQUFRO1VBQ25CLEdBQUdUO1FBQ0wsQ0FBQztRQUNELE9BQU9PLFNBQVMsQ0FBQ0csUUFBUTtRQUN6QlIsT0FBTyxDQUFDSyxTQUFTLENBQUM7TUFDcEIsQ0FBQyxNQUFNO1FBQ0xKLE1BQU0sQ0FBQyxJQUFJUSxLQUFLLENBQUUsU0FBUU4sS0FBSyxDQUFDTyxVQUFXLEVBQUMsQ0FBQyxDQUFDO01BQ2hEO0lBQ0YsQ0FB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