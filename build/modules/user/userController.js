const jwt = require("jsonwebtoken");
const bcryptjs = require("bcryptjs");
const helperWrapper = require("../../helper/wrapper");
const authModel = require("./userModel");
require("dotenv").config();
module.exports = {
  register: async (req, res) => {
    try {
      const {
        namaDepan,
        namaBelakang,
        email,
        password,
        point,
        karakter
      } = req.body;

      // PROSES PENGECEKAN EMAIL SUDAH PERNAH TERDAFTAR ATAU BLM DI DATABASE
      const checkUser = await authModel.getUserByEmail(email);
      if (checkUser.length > 0) {
        return helperWrapper.response(res, 409, `Email already used`, null);
      }

      // Proses Validasi input form
      if (email.length < 1 || password.length < 1) {
        return helperWrapper.response(res, 400, "All input must be filled", null);
      }

      // PROSES ENCRYPT PASSWORD
      const hashPassword = await bcryptjs.hash(password, 10);
      const setData = {
        namaDepan,
        namaBelakang,
        email,
        password: hashPassword,
        point,
        karakter,
        createdat: new Date(Date.now())
      };
      const result = await authModel.register(setData);
      // await sendMail(setDataMail);
      return helperWrapper.response(res, 200, "Success register user, please verify your email", result);
    } catch (error) {
      return helperWrapper.response(res, 400, `Bad Request, ${error.message}`, null);
    }
  },
  login: async (req, res) => {
    try {
      const {
        email,
        password
      } = req.body;
      const checkUser = await authModel.getUserByEmail(email);
      console.log(checkUser);

      // Proses Validasi input form
      if (email.length < 1 || password.length < 1) {
        return helperWrapper.response(res, 400, "All input must be filled", null);
      }
      const passwordUser = await bcryptjs.compare(password, checkUser[0].password);
      if (!passwordUser) {
        return helperWrapper.response(res, 400, "Wrong password", null);
      }

      // PROSES UTAMA MEMBUAT TOKEN MENGGUNAKAN JWT (DATA YANG MAU DIUBAH, KATA KUNCI, LAMA TOKEN BISA DIGUNAKAN )
      const payload = checkUser[0];
      delete payload.password;
      const token = jwt.sign({
        ...payload
      }, "RAHASIA", {
        expiresIn: "24h"
      });
      // Add refresh token
      const refreshToken = jwt.sign({
        ...payload
      }, "RAHASIA", {
        expiresIn: "72h"
      });
      return helperWrapper.response(res, 200, "Success login", {
        id: payload.id,
        token,
        refreshToken,
        name: payload.namaDepan + payload.namaBelakang,
        namaPengguna: payload.namaDepan,
        email: payload.email,
        alamat: payload.alamat,
        tentang: payload.tentang,
        createdby: payload.createdBy,
        char: payload.karakter,
        point: payload.point
      });
    } catch (error) {
      return helperWrapper.response(res, 400, `Bad request (${error.message})`, null);
    }
  },
  getUserId: async (req, res) => {
    try {
      const {
        id
      } = req.params;
      const result = await authModel.getUserId(id);
      if (result.length < 1) {
        return helperWrapper.response(res, 404, `data by id ${idUser} not found !`, null);
      }
      return helperWrapper.response(res, 200, "succes get data by id", result);
    } catch (error) {
      return helperWrapper.response(res, 400, `bad request (${error.message})`, null);
    }
  },
  getAllUser: async (req, res) => {
    try {
      let {
        page,
        limit,
        search,
        sort
      } = req.query;
      page = Number(page) || 1;
      limit = Number(limit) || 10;
      search = search || "";
      sort = sort || "point DESC";
      let offset = page * limit - limit;
      const totalData = await authModel.getCountUser(search);
      const totalPage = Math.ceil(totalData / limit);
      if (totalPage < page) {
        offset = 0;
        page = 1;
      }
      const pageInfo = {
        page,
        totalPage,
        limit,
        totalData
      };
      const result = await authModel.getAllUser(limit, offset, search, sort);
      if (result.length < 1) {
        return helperWrapper.response(res, 200, `Data not found !`, []);
      }
      return helperWrapper.response(res, 200, "Success get data", result, pageInfo);
    } catch (error) {
      return helperWrapper.response(res, 400, `Bad request (${error.message})`, null);
    }
  },
  updateUser: async (req, res) => {
    try {
      const {
        id
      } = req.params;
      const checkId = await authModel.updateUser;
      if (checkId.length < 1) {
        return helperWrapper.response(res, 404, `data by id ${id} not found !`, null);
      }
      const {
        point
      } = req.body;
      const setData = {
        point
      };
      // untuk mengupdate salah satu field saja
      Object.keys(setData).forEach(data => {
        if (!setData[data]) {
          delete setData[data];
        }
      });
      const result = await authModel.updateUser(setData, id);
      return helperWrapper.response(res, 200, "succes update data", result);
    } catch (error) {
      return helperWrapper.response(res, 400, `bad request (${error.message})`, null);
    }
  },
  updateGambar: async (req, res) => {
    try {
      const {
        id
      } = req.params;
      const checkId = await authModel.updateUser;
      if (checkId.length < 1) {
        return helperWrapper.response(res, 404, `data by id ${id} not found !`, null);
      }
      const {
        karakter
      } = req.body;
      const setData = {
        karakter
      };
      // untuk mengupdate salah satu field saja
      Object.keys(setData).forEach(data => {
        if (!setData[data]) {
          delete setData[data];
        }
      });
      const result = await authModel.updateUser(setData, id);
      return helperWrapper.response(res, 200, "succes update data", result);
    } catch (error) {
      return helperWrapper.response(res, 400, `bad request (${error.message})`, null);
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,