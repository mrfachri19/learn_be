/* eslint-disable guard-for-in */
/* eslint-disable no-restricted-syntax */
const shopModel = require("./shopModel");
const helperWrapper = require("../../helper/wrapper");
module.exports = {
  getShopByidUser: async (req, res) => {
    try {
      const {
        idUser
      } = req.params;
      const result = await shopModel.getShopByideUser(idUser);
      if (result.length < 1) {
        return helperWrapper.response(res, 404, `data by id ${idUser} not found !`, null);
      }
      return helperWrapper.response(res, 200, "succes get data by id", result);
    } catch (error) {
      return helperWrapper.response(res, 400, `bad request (${error.message})`, null);
    }
  },
  postShop: async (req, res) => {
    try {
      const {
        idUser,
        boy01,
        boy02,
        boy03,
        girl01,
        girl02,
        girl03
      } = req.body;
      const setData = {
        idUser,
        boy01,
        boy02,
        boy03,
        girl01,
        girl02,
        girl03
      };
      const result = await shopModel.PostShop(setData);
      return helperWrapper.response(res, 200, "Succes create data", result);
    } catch (error) {
      return helperWrapper.response(res, 400, `bad request (${error.message})`, null);
    }
  },
  UpdateShop: async (req, res) => {
    try {
      const {
        idUser
      } = req.params;
      const checkId = await shopModel.getShopByideUser;
      if (checkId.length < 1) {
        return helperWrapper.response(res, 404, `data by id ${idUser} not found !`, null);
      }
      const {
        progress1,
        progress2,
        progress3,
        progress4,
        progress5,
        progress6
      } = req.body;
      const setData = {
        progress1,
        progress2,
        progress3,
        progress4,
        progress5,
        progress6
      };
      // untuk mengupdate salah satu field saja
      Object.keys(setData).forEach(data => {
        if (!setData[data]) {
          delete setData[data];
        }
      });
      const result = await progressHtmlModel.updateProgressHtml(setData, idUser);
      return helperWrapper.response(res, 200, "succes update data", result);
    } catch (error) {
      return helperWrapper.response(res, 400, `bad request (${error.message})`, null);
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzaG9wTW9kZWwiLCJyZXF1aXJlIiwiaGVscGVyV3JhcHBlciIsIm1vZHVsZSIsImV4cG9ydHMiLCJnZXRTaG9wQnlpZFVzZXIiLCJyZXEiLCJyZXMiLCJpZFVzZXIiLCJwYXJhbXMiLCJyZXN1bHQiLCJnZXRTaG9wQnlpZGVVc2VyIiwibGVuZ3RoIiwicmVzcG9uc2UiLCJlcnJvciIsIm1lc3NhZ2UiLCJwb3N0U2hvcCIsImJveTAxIiwiYm95MDIiLCJib3kwMyIsImdpcmwwMSIsImdpcmwwMiIsImdpcmwwMyIsImJvZHkiLCJzZXREYXRhIiwiUG9zdFNob3AiLCJVcGRhdGVTaG9wIiwiY2hlY2tJZCIsInByb2dyZXNzMSIsInByb2dyZXNzMiIsInByb2dyZXNzMyIsInByb2dyZXNzNCIsInByb2dyZXNzNSIsInByb2dyZXNzNiIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwiZGF0YSIsInByb2dyZXNzSHRtbE1vZGVsIiwidXBkYXRlUHJvZ3Jlc3NIdG1sIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21vZHVsZXMvc2hvcC9zaG9wQ29udHJvbGxlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBndWFyZC1mb3ItaW4gKi9cclxuLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1zeW50YXggKi9cclxuY29uc3Qgc2hvcE1vZGVsID0gcmVxdWlyZShcIi4vc2hvcE1vZGVsXCIpO1xyXG5jb25zdCBoZWxwZXJXcmFwcGVyID0gcmVxdWlyZShcIi4uLy4uL2hlbHBlci93cmFwcGVyXCIpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgZ2V0U2hvcEJ5aWRVc2VyOiBhc3luYyAocmVxLCByZXMpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHsgaWRVc2VyIH0gPSByZXEucGFyYW1zO1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzaG9wTW9kZWwuZ2V0U2hvcEJ5aWRlVXNlcihpZFVzZXIpO1xyXG4gICAgICBpZiAocmVzdWx0Lmxlbmd0aCA8IDEpIHtcclxuICAgICAgICByZXR1cm4gaGVscGVyV3JhcHBlci5yZXNwb25zZShcclxuICAgICAgICAgIHJlcyxcclxuICAgICAgICAgIDQwNCxcclxuICAgICAgICAgIGBkYXRhIGJ5IGlkICR7aWRVc2VyfSBub3QgZm91bmQgIWAsXHJcbiAgICAgICAgICBudWxsXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGhlbHBlcldyYXBwZXIucmVzcG9uc2UocmVzLCAyMDAsIFwic3VjY2VzIGdldCBkYXRhIGJ5IGlkXCIsIHJlc3VsdCk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICByZXR1cm4gaGVscGVyV3JhcHBlci5yZXNwb25zZShcclxuICAgICAgICByZXMsXHJcbiAgICAgICAgNDAwLFxyXG4gICAgICAgIGBiYWQgcmVxdWVzdCAoJHtlcnJvci5tZXNzYWdlfSlgLFxyXG4gICAgICAgIG51bGxcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9LFxyXG4gIHBvc3RTaG9wOiBhc3luYyAocmVxLCByZXMpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHtcclxuICAgICAgICBpZFVzZXIsXHJcbiAgICAgICAgYm95MDEsXHJcbiAgICAgICAgYm95MDIsXHJcbiAgICAgICAgYm95MDMsXHJcbiAgICAgICAgZ2lybDAxLFxyXG4gICAgICAgIGdpcmwwMixcclxuICAgICAgICBnaXJsMDMsXHJcbiAgICAgIH0gPSByZXEuYm9keTtcclxuICAgICAgY29uc3Qgc2V0RGF0YSA9IHtcclxuICAgICAgICBpZFVzZXIsXHJcbiAgICAgICAgYm95MDEsXHJcbiAgICAgICAgYm95MDIsXHJcbiAgICAgICAgYm95MDMsXHJcbiAgICAgICAgZ2lybDAxLFxyXG4gICAgICAgIGdpcmwwMixcclxuICAgICAgICBnaXJsMDMsXHJcbiAgICAgIH07XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNob3BNb2RlbC5Qb3N0U2hvcChzZXREYXRhKTtcclxuICAgICAgcmV0dXJuIGhlbHBlcldyYXBwZXIucmVzcG9uc2UocmVzLCAyMDAsIFwiU3VjY2VzIGNyZWF0ZSBkYXRhXCIsIHJlc3VsdCk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICByZXR1cm4gaGVscGVyV3JhcHBlci5yZXNwb25zZShcclxuICAgICAgICByZXMsXHJcbiAgICAgICAgNDAwLFxyXG4gICAgICAgIGBiYWQgcmVxdWVzdCAoJHtlcnJvci5tZXNzYWdlfSlgLFxyXG4gICAgICAgIG51bGxcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9LFxyXG4gIFVwZGF0ZVNob3A6IGFzeW5jIChyZXEsIHJlcykgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgeyBpZFVzZXIgfSA9IHJlcS5wYXJhbXM7XHJcbiAgICAgIGNvbnN0IGNoZWNrSWQgPSBhd2FpdCBzaG9wTW9kZWwuZ2V0U2hvcEJ5aWRlVXNlcjtcclxuICAgICAgaWYgKGNoZWNrSWQubGVuZ3RoIDwgMSkge1xyXG4gICAgICAgIHJldHVybiBoZWxwZXJXcmFwcGVyLnJlc3BvbnNlKFxyXG4gICAgICAgICAgcmVzLFxyXG4gICAgICAgICAgNDA0LFxyXG4gICAgICAgICAgYGRhdGEgYnkgaWQgJHtpZFVzZXJ9IG5vdCBmb3VuZCAhYCxcclxuICAgICAgICAgIG51bGxcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IHtcclxuICAgICAgICBwcm9ncmVzczEsXHJcbiAgICAgICAgcHJvZ3Jlc3MyLFxyXG4gICAgICAgIHByb2dyZXNzMyxcclxuICAgICAgICBwcm9ncmVzczQsXHJcbiAgICAgICAgcHJvZ3Jlc3M1LFxyXG4gICAgICAgIHByb2dyZXNzNixcclxuICAgICAgfSA9IHJlcS5ib2R5O1xyXG4gICAgICBjb25zdCBzZXREYXRhID0ge1xyXG4gICAgICAgIHByb2dyZXNzMSxcclxuICAgICAgICBwcm9ncmVzczIsXHJcbiAgICAgICAgcHJvZ3Jlc3MzLFxyXG4gICAgICAgIHByb2dyZXNzNCxcclxuICAgICAgICBwcm9ncmVzczUsXHJcbiAgICAgICAgcHJvZ3Jlc3M2LFxyXG4gICAgICB9O1xyXG4gICAgICAvLyB1bnR1ayBtZW5ndXBkYXRlIHNhbGFoIHNhdHUgZmllbGQgc2FqYVxyXG4gICAgICBPYmplY3Qua2V5cyhzZXREYXRhKS5mb3JFYWNoKChkYXRhKSA9PiB7XHJcbiAgICAgICAgaWYgKCFzZXREYXRhW2RhdGFdKSB7XHJcbiAgICAgICAgICBkZWxldGUgc2V0RGF0YVtkYXRhXTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcm9ncmVzc0h0bWxNb2RlbC51cGRhdGVQcm9ncmVzc0h0bWwoXHJcbiAgICAgICAgc2V0RGF0YSxcclxuICAgICAgICBpZFVzZXJcclxuICAgICAgKTtcclxuICAgICAgcmV0dXJuIGhlbHBlcldyYXBwZXIucmVzcG9uc2UocmVzLCAyMDAsIFwic3VjY2VzIHVwZGF0ZSBkYXRhXCIsIHJlc3VsdCk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICByZXR1cm4gaGVscGVyV3JhcHBlci5yZXNwb25zZShcclxuICAgICAgICByZXMsXHJcbiAgICAgICAgNDAwLFxyXG4gICAgICAgIGBiYWQgcmVxdWVzdCAoJHtlcnJvci5tZXNzYWdlfSlgLFxyXG4gICAgICAgIG51bGxcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9LFxyXG59O1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxNQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxhQUFhLENBQUM7QUFDeEMsTUFBTUMsYUFBYSxHQUFHRCxPQUFPLENBQUMsc0JBQXNCLENBQUM7QUFFckRFLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2ZDLGVBQWUsRUFBRSxPQUFPQyxHQUFHLEVBQUVDLEdBQUcsS0FBSztJQUNuQyxJQUFJO01BQ0YsTUFBTTtRQUFF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