const connection = require("../../config/mysql");
module.exports = {
  getProgressHtmlById: id => new Promise((resolve, reject) => {
    connection.query("SELECT * FROM progresshtml WHERE idUser = ?", id, (err, result) => {
      if (!err) {
        resolve(result);
      } else {
        reject(new Error(`SQL : ${err.sqlMessage}`));
      }
    });
  }),
  PostProgressHtml: data => new Promise((resolve, reject) => {
    const query = connection.query("INSERT INTO progresshtml SET ?", data, (error, result) => {
      if (!error) {
        const newResult = {
          id: result.insertId,
          ...data
        };
        resolve(newResult);
      } else {
        reject(new Error(`SQL : ${error.sqlMessage}`));
      }
    });
    // eslint-disable-next-line no-console
    console.log(query.sql);
  }),
  updateProgressHtml: (data, id) => new Promise((resolve, reject) => {
    connection.query("UPDATE progresshtml SET ? WHERE idUser = ?", [data, id], error => {
      if (!error) {
        const newResult = {
          id,
          ...data
        };
        resolve(newResult);
      } else {
        reject(new Error(`SQL : ${error.sqlMessage}`));
      }
    });
  })
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb25uZWN0aW9uIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJnZXRQcm9ncmVzc0h0bWxCeUlkIiwiaWQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInF1ZXJ5IiwiZXJyIiwicmVzdWx0IiwiRXJyb3IiLCJzcWxNZXNzYWdlIiwiUG9zdFByb2dyZXNzSHRtbCIsImRhdGEiLCJlcnJvciIsIm5ld1Jlc3VsdCIsImluc2VydElkIiwiY29uc29sZSIsImxvZyIsInNxbCIsInVwZGF0ZVByb2dyZXNzSHRtbCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2R1bGVzL3Byb2dyZXNzSHRtbC9wcm9ncmVzc0h0bWxNb2RlbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjb25uZWN0aW9uID0gcmVxdWlyZShcIi4uLy4uL2NvbmZpZy9teXNxbFwiKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIGdldFByb2dyZXNzSHRtbEJ5SWQ6IChpZCkgPT5cclxuICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgY29ubmVjdGlvbi5xdWVyeShcclxuICAgICAgICBcIlNFTEVDVCAqIEZST00gcHJvZ3Jlc3NodG1sIFdIRVJFIGlkVXNlciA9ID9cIixcclxuICAgICAgICBpZCxcclxuICAgICAgICAoZXJyLCByZXN1bHQpID0+IHtcclxuICAgICAgICAgIGlmICghZXJyKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFNRTCA6ICR7ZXJyLnNxbE1lc3NhZ2V9YCkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICAgIH0pLFxyXG4gIFBvc3RQcm9ncmVzc0h0bWw6IChkYXRhKSA9PlxyXG4gICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBjb25zdCBxdWVyeSA9IGNvbm5lY3Rpb24ucXVlcnkoXHJcbiAgICAgICAgXCJJTlNFUlQgSU5UTyBwcm9ncmVzc2h0bWwgU0VUID9cIixcclxuICAgICAgICBkYXRhLFxyXG4gICAgICAgIChlcnJvciwgcmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICBpZiAoIWVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld1Jlc3VsdCA9IHtcclxuICAgICAgICAgICAgICBpZDogcmVzdWx0Lmluc2VydElkLFxyXG4gICAgICAgICAgICAgIC4uLmRhdGEsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJlc29sdmUobmV3UmVzdWx0KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFNRTCA6ICR7ZXJyb3Iuc3FsTWVzc2FnZX1gKSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxyXG4gICAgICBjb25zb2xlLmxvZyhxdWVyeS5zcWwpO1xyXG4gICAgfSksXHJcbiAgdXBkYXRlUHJvZ3Jlc3NIdG1sOiAoZGF0YSwgaWQpID0+XHJcbiAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGNvbm5lY3Rpb24ucXVlcnkoXHJcbiAgICAgICAgXCJVUERBVEUgcHJvZ3Jlc3NodG1sIFNFVCA/IFdIRVJFIGlkVXNlciA9ID9cIixcclxuICAgICAgICBbZGF0YSwgaWRdLFxyXG4gICAgICAgIChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgaWYgKCFlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdSZXN1bHQgPSB7XHJcbiAgICAgICAgICAgICAgaWQsXHJcbiAgICAgICAgICAgICAgLi4uZGF0YSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmVzb2x2ZShuZXdSZXN1bHQpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgU1FMIDogJHtlcnJvci5zcWxNZXNzYWdlfWApKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICB9KSxcclxufTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxVQUFVLEdBQUdDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztBQUVoREMsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZkMsbUJBQW1CLEVBQUdDLEVBQUUsSUFDdEIsSUFBSUMsT0FBTyxDQUFDLENBQUNDLE9BQU8sRUFBRUMsTUFBTSxLQUFLO0lBQy9CUixVQUFVLENBQUNTLEtBQUssQ0FDZCw2Q0FBNkMsRUFDN0NKLEVBQUUsRUFDRixDQUFDSyxHQUFHLEVBQUVDLE1BQU0sS0FBSztNQUNmLElBQUksQ0FBQ0QsR0FBRyxFQUFFO1FBQ1JILE9BQU8sQ0FBQ0ksTUFBTSxDQUFDO01BQ2pCLENBQUMsTUFBTTtRQUNMSCxNQUFNLENBQUMsSUFBSUksS0FBSyxDQUFFLFNBQVFGLEdBQUcsQ0FBQ0csVUFBVyxFQUFDLENBQUMsQ0FBQztNQUM5QztJQUNGLENBQUMsQ0FDRjtFQUNILENBQUMsQ0FBQztFQUNKQyxnQkFBZ0IsRUFBR0MsSUFBSSxJQUNyQixJQUFJVCxPQUFPLENBQUMsQ0FBQ0MsT0FBTyxFQUFFQyxNQUFNLEtBQUs7SUFDL0IsTUFBTUMsS0FBSyxHQUFHVCxVQUFVLENBQUNTLEtBQUssQ0FDNUIsZ0NBQWdDLEVBQ2hDTSxJQUFJLEVBQ0osQ0FBQ0MsS0FBSyxFQUFFTCxNQUFNLEtBQUs7TUFDakIsSUFBSSxDQUFDSyxLQUFLLEVBQUU7UUFDVixNQUFNQyxTQUFTLEdBQUc7VUFDaEJaLEVBQUUsRUFBRU0sTUFBTSxDQUFDTyxRQUFRO1VBQ25CLEdBQUdIO1FBQ0wsQ0FBQztRQUNEUixPQUFPLENBQUNVLFNBQVMsQ0FBQztNQUNwQixDQUFDLE1BQU07UUFDTFQsTUFBTSxDQUFDLElBQUlJLEtBQUssQ0FBRSxTQUFRSSxLQUFLLENBQUNILFVBQVcsRUFBQyxDQUFDLENBQUM7TUFDaEQ7SUFDRixDQUFDLENBQ0Y7SUFDRDtJQUNBTSxPQUFPLENBQUNDLEdBQUcsQ0FBQ1gsS0FBSyxDQUFDWSxHQUFHLENBQUM7RUFDeEIsQ0FBQyxDQUFDO0VBQ0pDLGtCQUFrQixFQUFFLENBQUNQLElBQUksRUFBRVYsRUFBRSxLQUMzQixJQUFJQyxPQUFPLENBQUMsQ0FBQ0MsT0FBTyxFQUFFQyxNQUFNLEtBQUs7SUFDL0JSLFVBQVUsQ0FBQ1MsS0FBSyxDQUNkLDRDQUE0QyxFQUM1QyxDQUFDTSxJQUFJLEVBQUVWLEVBQUUsQ0FBQyxFQUNUVyxLQUFLLElBQUs7TUFDVCxJQUFJLENBQUNBLEtBQUssRUFBRTtRQUNWLE1BQU1DLFNBQVMsR0FBRztVQUNoQlosRUFBRTtVQUNGLEdBQUdVO1FBQ0wsQ0FBQztRQUNEUixPQUFPLENBQUNVLFNBQVMsQ0FBQztNQUNwQixDQUFDLE1BQU07UUFDTFQsTUFBTSxDQUFDLElBQUlJLEtBQUssQ0FBRSxTQUFRSSxLQUFLLENBQUNILFVBQVcsRUFBQyxDQUFDLENBQUM7TUFDaEQ7SUFDRixDQUFDLENBQ0Y7RUFDSCxDQUFDO0FBQ0wsQ0FBQyJ9