/* eslint-disable guard-for-in */
/* eslint-disable no-restricted-syntax */
const progressHtmlModel = require("./progressHtmlModel");
const helperWrapper = require("../../helper/wrapper");
module.exports = {
  getProgressHtmlById: async (req, res) => {
    try {
      const {
        idUser
      } = req.params;
      const result = await progressHtmlModel.getProgressHtmlById(idUser);
      if (result.length < 1) {
        return helperWrapper.response(res, 404, `data by id ${idUser} not found !`, null);
      }
      return helperWrapper.response(res, 200, "succes get data by id", result);
    } catch (error) {
      return helperWrapper.response(res, 400, `bad request (${error.message})`, null);
    }
  },
  PostProgressHtml: async (req, res) => {
    try {
      const {
        idUser,
        progress1,
        progress2,
        progress3,
        progress4,
        progress5,
        progress6
      } = req.body;
      const setData = {
        idUser,
        progress1,
        progress2,
        progress3,
        progress4,
        progress5,
        progress6
      };
      const result = await progressHtmlModel.PostProgressHtml(setData);
      return helperWrapper.response(res, 200, "Succes create data", result);
    } catch (error) {
      return helperWrapper.response(res, 400, `bad request (${error.message})`, null);
    }
  },
  updateProgressHtml: async (req, res) => {
    try {
      const {
        idUser
      } = req.params;
      const checkId = await progressHtmlModel.getProgressHtmlById;
      if (checkId.length < 1) {
        return helperWrapper.response(res, 404, `data by id ${idUser} not found !`, null);
      }
      const {
        progress1,
        progress2,
        progress3,
        progress4,
        progress5,
        progress6
      } = req.body;
      const setData = {
        progress1,
        progress2,
        progress3,
        progress4,
        progress5,
        progress6
      };
      // untuk mengupdate salah satu field saja
      Object.keys(setData).forEach(data => {
        if (!setData[data]) {
          delete setData[data];
        }
      });
      const result = await progressHtmlModel.updateProgressHtml(setData, idUser);
      return helperWrapper.response(res, 200, "succes update data", result);
    } catch (error) {
      return helperWrapper.response(res, 400, `bad request (${error.message})`, null);
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwcm9ncmVzc0h0bWxNb2RlbCIsInJlcXVpcmUiLCJoZWxwZXJXcmFwcGVyIiwibW9kdWxlIiwiZXhwb3J0cyIsImdldFByb2dyZXNzSHRtbEJ5SWQiLCJyZXEiLCJyZXMiLCJpZFVzZXIiLCJwYXJhbXMiLCJyZXN1bHQiLCJsZW5ndGgiLCJyZXNwb25zZSIsImVycm9yIiwibWVzc2FnZSIsIlBvc3RQcm9ncmVzc0h0bWwiLCJwcm9ncmVzczEiLCJwcm9ncmVzczIiLCJwcm9ncmVzczMiLCJwcm9ncmVzczQiLCJwcm9ncmVzczUiLCJwcm9ncmVzczYiLCJib2R5Iiwic2V0RGF0YSIsInVwZGF0ZVByb2dyZXNzSHRtbCIsImNoZWNrSWQiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImRhdGEiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbW9kdWxlcy9wcm9ncmVzc0h0bWwvcHJvZ3Jlc3NIdG1sQ29udHJvbGxlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBndWFyZC1mb3ItaW4gKi9cclxuLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1zeW50YXggKi9cclxuY29uc3QgcHJvZ3Jlc3NIdG1sTW9kZWwgPSByZXF1aXJlKFwiLi9wcm9ncmVzc0h0bWxNb2RlbFwiKTtcclxuY29uc3QgaGVscGVyV3JhcHBlciA9IHJlcXVpcmUoXCIuLi8uLi9oZWxwZXIvd3JhcHBlclwiKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIGdldFByb2dyZXNzSHRtbEJ5SWQ6IGFzeW5jIChyZXEsIHJlcykgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgeyBpZFVzZXIgfSA9IHJlcS5wYXJhbXM7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByb2dyZXNzSHRtbE1vZGVsLmdldFByb2dyZXNzSHRtbEJ5SWQoaWRVc2VyKTtcclxuICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgcmV0dXJuIGhlbHBlcldyYXBwZXIucmVzcG9uc2UoXHJcbiAgICAgICAgICByZXMsXHJcbiAgICAgICAgICA0MDQsXHJcbiAgICAgICAgICBgZGF0YSBieSBpZCAke2lkVXNlcn0gbm90IGZvdW5kICFgLFxyXG4gICAgICAgICAgbnVsbFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBoZWxwZXJXcmFwcGVyLnJlc3BvbnNlKHJlcywgMjAwLCBcInN1Y2NlcyBnZXQgZGF0YSBieSBpZFwiLCByZXN1bHQpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgcmV0dXJuIGhlbHBlcldyYXBwZXIucmVzcG9uc2UoXHJcbiAgICAgICAgcmVzLFxyXG4gICAgICAgIDQwMCxcclxuICAgICAgICBgYmFkIHJlcXVlc3QgKCR7ZXJyb3IubWVzc2FnZX0pYCxcclxuICAgICAgICBudWxsXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfSxcclxuICBQb3N0UHJvZ3Jlc3NIdG1sOiBhc3luYyAocmVxLCByZXMpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHtcclxuICAgICAgICBpZFVzZXIsXHJcbiAgICAgICAgcHJvZ3Jlc3MxLFxyXG4gICAgICAgIHByb2dyZXNzMixcclxuICAgICAgICBwcm9ncmVzczMsXHJcbiAgICAgICAgcHJvZ3Jlc3M0LFxyXG4gICAgICAgIHByb2dyZXNzNSxcclxuICAgICAgICBwcm9ncmVzczYsXHJcbiAgICAgIH0gPSByZXEuYm9keTtcclxuICAgICAgY29uc3Qgc2V0RGF0YSA9IHtcclxuICAgICAgICBpZFVzZXIsXHJcbiAgICAgICAgcHJvZ3Jlc3MxLFxyXG4gICAgICAgIHByb2dyZXNzMixcclxuICAgICAgICBwcm9ncmVzczMsXHJcbiAgICAgICAgcHJvZ3Jlc3M0LFxyXG4gICAgICAgIHByb2dyZXNzNSxcclxuICAgICAgICBwcm9ncmVzczYsXHJcbiAgICAgIH07XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByb2dyZXNzSHRtbE1vZGVsLlBvc3RQcm9ncmVzc0h0bWwoc2V0RGF0YSk7XHJcbiAgICAgIHJldHVybiBoZWxwZXJXcmFwcGVyLnJlc3BvbnNlKHJlcywgMjAwLCBcIlN1Y2NlcyBjcmVhdGUgZGF0YVwiLCByZXN1bHQpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgcmV0dXJuIGhlbHBlcldyYXBwZXIucmVzcG9uc2UoXHJcbiAgICAgICAgcmVzLFxyXG4gICAgICAgIDQwMCxcclxuICAgICAgICBgYmFkIHJlcXVlc3QgKCR7ZXJyb3IubWVzc2FnZX0pYCxcclxuICAgICAgICBudWxsXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfSxcclxuICB1cGRhdGVQcm9ncmVzc0h0bWw6IGFzeW5jIChyZXEsIHJlcykgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgeyBpZFVzZXIgfSA9IHJlcS5wYXJhbXM7XHJcbiAgICAgIGNvbnN0IGNoZWNrSWQgPSBhd2FpdCBwcm9ncmVzc0h0bWxNb2RlbC5nZXRQcm9ncmVzc0h0bWxCeUlkO1xyXG4gICAgICBpZiAoY2hlY2tJZC5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgcmV0dXJuIGhlbHBlcldyYXBwZXIucmVzcG9uc2UoXHJcbiAgICAgICAgICByZXMsXHJcbiAgICAgICAgICA0MDQsXHJcbiAgICAgICAgICBgZGF0YSBieSBpZCAke2lkVXNlcn0gbm90IGZvdW5kICFgLFxyXG4gICAgICAgICAgbnVsbFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3Qge1xyXG4gICAgICAgIHByb2dyZXNzMSxcclxuICAgICAgICBwcm9ncmVzczIsXHJcbiAgICAgICAgcHJvZ3Jlc3MzLFxyXG4gICAgICAgIHByb2dyZXNzNCxcclxuICAgICAgICBwcm9ncmVzczUsXHJcbiAgICAgICAgcHJvZ3Jlc3M2LFxyXG4gICAgICB9ID0gcmVxLmJvZHk7XHJcbiAgICAgIGNvbnN0IHNldERhdGEgPSB7XHJcbiAgICAgICAgcHJvZ3Jlc3MxLFxyXG4gICAgICAgIHByb2dyZXNzMixcclxuICAgICAgICBwcm9ncmVzczMsXHJcbiAgICAgICAgcHJvZ3Jlc3M0LFxyXG4gICAgICAgIHByb2dyZXNzNSxcclxuICAgICAgICBwcm9ncmVzczYsXHJcbiAgICAgIH07XHJcbiAgICAgIC8vIHVudHVrIG1lbmd1cGRhdGUgc2FsYWggc2F0dSBmaWVsZCBzYWphXHJcbiAgICAgIE9iamVjdC5rZXlzKHNldERhdGEpLmZvckVhY2goKGRhdGEpID0+IHtcclxuICAgICAgICBpZiAoIXNldERhdGFbZGF0YV0pIHtcclxuICAgICAgICAgIGRlbGV0ZSBzZXREYXRhW2RhdGFdO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByb2dyZXNzSHRtbE1vZGVsLnVwZGF0ZVByb2dyZXNzSHRtbChcclxuICAgICAgICBzZXREYXRhLFxyXG4gICAgICAgIGlkVXNlclxyXG4gICAgICApO1xyXG4gICAgICByZXR1cm4gaGVscGVyV3JhcHBlci5yZXNwb25zZShyZXMsIDIwMCwgXCJzdWNjZXMgdXBkYXRlIGRhdGFcIiwgcmVzdWx0KTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHJldHVybiBoZWxwZXJXcmFwcGVyLnJlc3BvbnNlKFxyXG4gICAgICAgIHJlcyxcclxuICAgICAgICA0MDAsXHJcbiAgICAgICAgYGJhZCByZXF1ZXN0ICgke2Vycm9yLm1lc3NhZ2V9KWAsXHJcbiAgICAgICAgbnVsbFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH0sXHJcbn07XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLE1BQU1BLGlCQUFpQixHQUFHQyxPQUFPLENBQUMscUJBQXFCLENBQUM7QUFDeEQsTUFBTUMsYUFBYSxHQUFHRCxPQUFPLENBQUMsc0JBQXNCLENBQUM7QUFFckRFLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2ZDLG1CQUFtQixFQUFFLE9BQU9DLEdB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